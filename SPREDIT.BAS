5 CLS:PRINT "FOENIX SPRITE EDITOR v0.8"10 i%=0:sx%=5:sy%=5:mb%=&haf0700:xo%=sx%*4:yo%=sy%*3:scount%=012 spb%=&hc00000:brush%=0:curspr%=0:grid%=0:fe%=015 GOSUB 2100:GOSUB 300020 FOR c%=0 TO 255:REMm load "duel" palette30 READ r%,g%,b%40 SETCOLOR 0,c%,r%,g%,b%50 col%=160 NEXT70 BLOAD "spredit.ml",&ha0000100 GRAPHICS 47+512:REMm enable graphic mode110 BITMAP 0,1,0,&hB00000120 REM graphics settings off:tiles, gamma130 SETBORDER 0:CLRBITMAP 0140 GOSUB 3500:REMm print menu icons145 GOSUB 5300:REMm paint palette bars150 FOR b%=0 TO 31160 FOR c%=0 TO 7170 xi%=(c%*sx%)+1+xo%:xf%=((c%+1)*sx%)+xo%180 yi%=(b%*sy%)+1+yo%:yf%=((b%+1)*sy%)+yo%190 FILL 0,xi%,yi%,xf%,yf%,i%200 i%=i%+1210 NEXT:NEXT215 LINE 0,xo%+1,yo%+1,xo%+sx%-1,yo%+sy%-1,72216 LINE 0,xo%+1,yo%+sy%-1,xo%+sx%-1,yo%+1,72220 GOSUB 2000:REMm init sprite grid225 col%=1:x%=5:y%=3:GOTO 2520:REMm set default init color230 GOSUB 3000:REM show sprite to edit235 REM main loop240 GOSUB 2300:REMm read mouse250 x%=INT(mx%/sx%)260 y%=INT(my%/sy%)270 IF mb1% <> 0 THEN 2400280 IF mb2% <>0 THEN 4000500 GOTO 2401999 END2000 REM clr sprite area2010 xo%=sx%*132020 FILL 0,xo%,yo%,xo%+sx%*32,yo%+sy%*32,02030 FOR b%=0 TO 322040 LINE 0,xo%+b%*sx%,yo%,xo%+b%*sx%,yo%+sy%*32,32050 LINE 0,xo%,yo%+b%*sy%,xo%+sx%*32,yo%+sy%*b%,32060 NEXT2070 RETURN2100 REM Create cursor sprite2110 GRAPHICS 472120 BITMAP 1,1,0,&HC000002122 CLRBITMAP 12124 BITMAP 1,0,02126 MEMCOPY LINEAR spb%,1024 TO LINEAR &HBFF800,10242130 FOR c%=0 TO sx%:POKE spb%+c%,255:NEXT:REM spr top2140 FOR c%=1 TO sy%-1:POKE spb%+c%*32,255:POKE spb%+sx%+c%*32,255:NEXT2150 FOR c%=0 TO sx%:POKE spb%+(sy%*32)+c%,255:NEXT:REMm spr bottom2160 SPRITE 1,0,spb%2170 SPRITEAT 1,32+sx%*4,32+yo%2180 SPRITESHOW 1,12190 SPRITESHOW 3,02200 RETURN2300 REM read mouse state2310 mx%=PEEK(mb%+3)*256+PEEK(mb%+2)2320 my%=(PEEK(mb%+5)*256+PEEK(mb%+4))/22330 mb1%=PEEK(mb%+6) AND 12340 mb2%=PEEK(mb%+6) AND 22350 mb3%=PEEK(mb%+6) AND 42360 RETURN2400 REM mouse button 1 pressed2405 IF y%>=40 THEN 5700:REMm modify current palette color2410 IF x%<3 THEN 2670:REM menu items2420 IF x%<4 THEN 5002430 IF x%<12 THEN 2470:REM change palette color2435 IF x%=12 THEN 500:REM do nothing2440 IF x%<=44 THEN 25702445 IF x%<=55 THEN 25702450 GOTO 500:REM do nothing2460 REM mouse is in palette area2470 IF y%<3 THEN 500:REM do nothing2480 IF y%<35 THEN 25102490 GOTO 500:REMm do nothing2500 REM click on palette area2510 col%=(y%-3)*8+x%-42520 FILL 0,sx%*4,sy%*36,sx%*12,sy%*39,col%2525 SPRITEAT 1,(x%)*sx%+32,(y%)*sy%+322527 GOSUB 53402530 GOTO 5002540 REM mouse is in sprite area2550 GOTO 25602560 IF y%<3 THEN 5002570 IF y%<=34 THEN 26002575 IF y%<36 THEN 5002576 IF y%<39 THEN 4300:REMm paint tools2580 GOTO 500:REMm do nothing2590 RETURN2600 IF y%<3 THEN 5002610 FOR c%=0 TO brush%:FOR d%=0 TO brush%2612 IF x%+c%>44 THEN 26352613 IF y%+d%>34 THEN 26352615 px%=(x%+c%)*sx%:py%=(y%+d%)*sy%2620 FILL 0,px%+1,py%+1,px%+sx%,py%+sy%,col%2630 POKE spb%+1023+(1024*curspr%)+(x%+c%-12)+(y%+d%-3)*32,col%2635 NEXT:NEXT2650 GOTO 5002660 REM process menu items2670 IF y%<3 THEN 500:REM do nothing2680 IF y%<6 THEN 3100:REMm save sprite2690 IF y%<9 THEN 3200:REMm load sprite2700 IF y%<12 THEN 3310:REM add a sprite2710 IF y%<15 THEN 3410:REMm delete a sprite2720 IF y%<18 THEN 3315:REM move to next sprite2730 IF y%<21 THEN 3421:REM move to previous sprite2740 IF y%<24 THEN 5100:REM exit editor2750 IF y%<35 THEN 500:REM do nothing2760 IF y%<36 THEN 500:REM do nothing2999 GOTO 5003000 REM show sprite(s)3010 SPRITE 2,0,spb%+10243020 SPRITEAT 2,272,1223030 SPRITESHOW 2,13040 RETURN3100 REM save sprite3110 CLS:INPUT "save file name?";s$3115 s$=LEFT$(s$,8)+".SPR"3116 l%=1024*(scount%+1)3120 MEMCOPY LINEAR &hc00000+1024,l% TO LINEAR &h100001,l%3130 POKE &h100000,scount%:REM set # of sprites saved in first byte3140 GOSUB 5200:IF fe%=0 THEN 31703145 BSAVE s$,&h100000,&h100001+l%3150 CLS:PRINT scount%+1;" sprites saved as ";s$;" ";scount%+1;"kb"3160 GOTO 5003170 CLS:PRINT "Filename already exists, try again!"3180 GOTO 5003200 REM load sprite3210 CLS:INPUT "file to load";s$3215 s$=RIGHT$(s$,8)+".SPR"3220 GOSUB 5200:IF fe%<>0 THEN 32803225 BLOAD s$,&h100000-13230 scount%=PEEK(&h0fffff):l%=(scount%+1)*1024:curspr%=03240 MEMCOPY LINEAR &h100000,l% TO LINEAR &Hc00400,l%3250 CLS:PRINT "Loaded spr01",PEEK(&h0fffff)3255 SPRITE 2,0,&hc004003260 GOSUB 42003270 GOTO 5003280 CLS:PRINT "file doesn't exist, try again!"3290 GOTO 5003300 REM add a sprite to the count3310 scount%=scount%+13315 curspr%=curspr%+13316 IF curspr%<=scount% THEN 33203317 curspr%=scount%3320 SPRITE 2,0,spb%+1024+(curspr%*1024)3330 GOSUB 4200:REMm draw sprite3340 GOSUB 23003350 IF mb1% <> 0 THEN 33403360 GOTO 5003400 REM delete a sprite to the count3410 IF scount%<=0 THEN 34703411 CLS:PRINT "Press y to delete sprite, any other key to cancel"3412 k$="":GET k$3413 IF k$<>"y" THEN 34303414 IF scount%=curspr% THEN 34203415 b%=&hc00400+(curspr%+1)*1024:l%=(scount%+curspr%)*10243416 MEMCOPY LINEAR b%,l% TO LINEAR b%-1024,l%3420 scount%=scount%-13421 curspr%=curspr%-13422 IF curspr%>=0 THEN 34253423 curspr%=03425 SPRITE 2,0,spb%+1024+(curspr%*1024)3430 GOSUB 4200:REMm draw sprite3440 GOSUB 23003450 IF mb1% <> 0 THEN 33403460 GOTO 5003470 CLS:PRINT "Can't delete the last sprite"3475 scount%=03480 GOTO 34403500 REM menu icons3510 BLOAD "icons.spr",&h100000-13530 ipos%=&hb00000+(sy%*3)*320:REMm save icon3540 MEMCOPY RECT &h100000,16,16,32 TO RECT ipos%,16,16,3203550 ipos%=&hb00000+(sy%*6)*320:REMm load icon3560 MEMCOPY RECT &h100010,16,16,32 TO RECT ipos%,16,16,3203570 ipos%=&hb00000+(sy%*9)*320:REMm add sprite icon3580 MEMCOPY RECT &h100200,16,16,32 TO RECT ipos%,16,16,3203590 ipos%=&hb00000+(sy%*12)*320:REMm delete sprite icon3600 MEMCOPY RECT &h100210,16,16,32 TO RECT ipos%,16,16,3203610 ipos%=&hb00000+(sy%*15)*320:REMm next sprite icon3620 MEMCOPY RECT &h100400,16,16,32 TO RECT ipos%,16,16,3203630 ipos%=&hb00000+(sy%*18)*320:REMm previous sprite icon3640 MEMCOPY RECT &h100410,16,16,32 TO RECT ipos%,16,16,3203650 ipos%=&hb00000+(sy%*21)*320:REMm exit icon3660 MEMCOPY RECT &h100610,16,16,32 TO RECT ipos%,16,16,3203670 ipos%=&hb00000+sx%*13+(sy%*36)*320:REMm brush size icon3680 MEMCOPY RECT &h100600,16,16,32 TO RECT ipos%,16,16,3203690 ipos%=&hb00000+sx%*16+(sy%*36)*320:REMm brush size icon3700 MEMCOPY RECT &h100810,16,16,32 TO RECT ipos%,16,16,3203710 ipos%=&hb00000+sx%*19+(sy%*36)*320:REMm brush size icon3720 MEMCOPY RECT &h100a00,16,16,32 TO RECT ipos%,16,16,3203730 ipos%=&hb00000+sx%*22+(sy%*36)*320:REMm brush size icon3740 MEMCOPY RECT &h100a10,16,16,32 TO RECT ipos%,16,16,3203750 ipos%=&hb00000+sx%*25+(sy%*36)*320:REMm brush size icon3760 MEMCOPY RECT &h100800,16,16,32 TO RECT ipos%,16,16,3203770 ipos%=&hb00000+sx%*28+(sy%*36)*320:REMm brush size icon3780 MEMCOPY RECT &h100e10,16,16,32 TO RECT ipos%,16,16,3203790 ipos%=&hb00000+sx%*31+(sy%*36)*320:REMm brush size icon3800 MEMCOPY RECT &h101000,16,16,32 TO RECT ipos%,16,16,3203810 ipos%=&hb00000+sx%*50+(sy%*36)*320:REMm brush size icon3820 MEMCOPY RECT &h100c00,16,16,32 TO RECT ipos%,16,16,3203830 ipos%=&hb00000+sx%*53+(sy%*36)*320:REMm brush size icon3850 MEMCOPY RECT &h100c10,16,16,32 TO RECT ipos%,16,16,3203860 ipos%=&hb00000+(sy%*40+1)*320:REMm brush size icon3870 MEMCOPY RECT &h101200,20,4,32 TO RECT ipos%,20,04,3203880 ipos%=&hb00000+(sy%*42+1)*320:REMm brush size icon3890 MEMCOPY RECT &h101280,20,4,32 TO RECT ipos%,20,04,3203910 ipos%=&hb00000+(sy%*44+1)*320:REMm brush size icon3920 MEMCOPY RECT &h101300,20,4,32 TO RECT ipos%,20,04,3203930 ipos%=&hb00000+sx%*58+(sy%*38)*320:REMm brush size icon3940 MEMCOPY RECT &h101380,24,4,32 TO RECT ipos%,24,04,3203960 RETURN3999 END4000 REM get color at mouse pointer4010 vy%=my%-INT(my%/5)*5:vx%=mx%-INT(mx%/5)*54015 IF vy%>0 THEN 40254020 my%=my%+14025 IF vx%>0 THEN 40304027 mx%=mx%+14030 MEMCOPY LINEAR &HB00000+mx%+my%*320,2 TO LINEAR &H010000,24040 col%=PEEK(&H010000)4050 IF col%<>3 THEN 40704060 col%=PEEK(&h010001)4070 y%=INT(col%/8):x%=col%-INT(col%/8)*8:y%=y%+3:x%=x%+44080 GOSUB  23004090 IF mb2% <> 0 THEN 40804100 GOTO 25204200 REM DRAW SPRITE REPRESENTATION ONSCREEN4210 MEMCOPY LINEAR &hc003ff+(1024*curspr%+1),1024 TO LINEAR &H010000,10244220 CALL &HA0000 :REM machine language routine TO draw SPRITE onscreen4230 CLS:PRINT "Editing Sprite";curspr%+1;" of";scount%+14240 RETURN4300 REM paint tools4310 IF x%<16 THEN 4410:REMm brush tool4320 IF x%<19 THEN 4500:REM copy tool4330 IF x%<22 THEN 4550:REM paste tool4340 IF x%<22 THEN 4550:REM paste tool4350 IF x%<25 THEN 4600:REM CLR tool4360 IF x%<28 THEN 4650:REM guidelines tool4370 IF x%<31 THEN 4800:REM mirror X4380 IF x%<34 THEN 4870:REM mirror y4385 IF x%<50 THEN 500:REMm do nothing4386 IF x%<53 THEN 5500:REMm load palette4387 IF x%<56 THEN 5600:REMm save palette4390 GOTO 5004400 REM brush size tool4410 brush%=brush%+14420 IF brush%<3 THEN 44404430 brush%=04440 CLS:PRINT "Set pen size ";brush%+14450 REM wait for mouse button release4460 GOSUB 23004470 IF mb1% <> 0 THEN 44404480 GOTO 5004500 REM copy sprite4510 l%=&hc00400+curspr%*10244520 MEMCOPY LINEAR l%,1024 TO LINEAR &hbffc00,10244530 SPRITE 3,0,&hbffc004540 SPRITEAT 3,320,230:SPRITESHOW 3,14545 GOTO 5004550 REM paste sprite4560 l%=&hc00400+curspr%*10244570 MEMCOPY LINEAR &hbffc00,1024 TO LINEAR l%,10244580 SPRITESHOW 3,04590 GOSUB 42004595 GOTO 5004600 REM Clear current sprite4610 L%=&HC00400+CURSPR%*10244620 MEMCOPY LINEAR &hbff800,1024 TO LINEAR l%,10244630 GOSUB 42004640 GOTO 5004650 REM show guidelines4655 FOR b%=0 TO 32 STEP 44660 LINE 0,xo%+b%*sx%,yo%,xo%+b%*sx%,yo%+sy%*32,34670 LINE 0,xo%,yo%+b%*sy%,xo%+sx%*32,yo%+sy%*b%,34680 NEXT4690 grid%=grid%+14700 IF grid%<>1 THEN 47204710 grid%=24720 IF grid%<=4 THEN 47404730 grid%=0:GOTO 5004740 l%=2^grid%4750 FOR b%=0 TO 32 STEP l%4760 LINE 0,xo%+b%*sx%,yo%,xo%+b%*sx%,yo%+sy%*32,724770 LINE 0,xo%,yo%+b%*sy%,xo%+sx%*32,yo%+sy%*b%,724780 NEXT4790 GOTO 5004800 REM mirror sprite X4810 MEMCOPY LINEAR &hc003ff+(1024*curspr%+1),1024 TO LINEAR &H010000,10244820 CALL &h0a0100:CALL &h0a00004830 MEMCOPY LINEAR &h010000,1024 TO LINEAR &hc003ff+(1024*curspr%+1),10244840 GOSUB 23004850 IF mb1%<>0 THEN 48404860 GOTO 5004870 REM mirror sprite y4890 MEMCOPY LINEAR &hc003ff+(1024*curspr%+1),1024 TO LINEAR &H010000,10244900 CALL &h0a0200:CALL &h0a00004910 MEMCOPY LINEAR &h010000,1024 TO LINEAR &hc003ff+(1024*curspr%+1),10244920 GOSUB 23004930 IF mb1%<>0 THEN 49204940 GOTO 5005100 REM exit sprite editor5110 CLRBITMAP 0:GRAPHICS 47:CLS5125 PRINT "Thx for Using the Sprite Editor!"5130 FOR c%=1 TO 10:SPRITESHOW c%,0:NEXT5140 END5200 REM verify existing file5210 FOR c%=0 TO LEN(s$)5220 POKE 1024+c%,ASC(MID$(s$,c%,1))5230 NEXT5240 CALL &h1110:REM call directory read routine from kernel5250 fe%=PEEK(&H32e):REM READ FAT status from kernel <> 0 = Error5260 RETURN5300 REM show current palette color5310 FILL 0,sx%*4,sy%*40+1,sx%*5+255,sy%*41,35320 FILL 0,sx%*4,sy%*42+1,sx%*5+255,sy%*43,35330 FILL 0,sx%*4,sy%*44+1,sx%*5+255,sy%*45,35340 SPRITE 5,0,&hc00000:SPRITE 6,0,&hc00000:SPRITE 7,0,&hc000005350 padd%=&haf2000:REMm palette 0 base address5360 colb%=PEEK(padd%+col%*4)5370 colg%=PEEK(padd%+col%*4+1)5380 colr%=PEEK(padd%+col%*4+2)5400 SPRITEAT 5,sx%*4+colr%+32,sy%*40+325410 SPRITEAT 6,sx%*4+colg%+32,sy%*42+325420 SPRITEAT 7,sx%*4+colb%+32,sy%*44+325430 FOR c%=5 TO 7:SPRITESHOW c%,1:NEXT5440 RETURN5500 REM load color palette5510 CLS:INPUT "file to load";s$5515 padd%=&haf2000:REM palette 0 base address5520 s$=RIGHT$(s$,8)+".PAL"5530 GOSUB 5200:IF fe%<>0 THEN 55805540 BLOAD s$,&h1000005545 MEMCOPY LINEAR &h100000,1024 TO LINEAR padd%,10245550 CLS:PRINT "Loaded palette ";s$5560 GOTO 5005570 CLS:PRINT "file doesn't exist, try again!"5580 GOTO 5005600 REM save color palette5610 padd%=&haf2000:REM palette 0 base address5620 CLS:INPUT "palette file name?";s$5630 s$=LEFT$(s$,8)+".PAL"5640 GOSUB 5200:IF fe%=0 THEN 56805650 BSAVE s$,padd%,padd%+10245660 CLS:PRINT "Palette saved as ";s$;" 1kb"5670 GOTO 5005680 CLS:PRINT "Filename already exists, try again!"5690 GOTO 5005700 REM modify palette entry5705 padd%=&Haf2000:REM palette 0 base address5710 IF x%<4 THEN 500:REMm do nothing5720 IF x%<56 THEN 57405730 GOTO 500:REMm do nothing5740 IF y%=40 THEN 5800:REMm modify red5750 IF y%=42 THEN 5850:REMm modify green5760 IF y%=44 THEN 5900:REMm modify blue5770 GOTO 500:REMm do nothing5800 colr%=mx%-(4*sx%)5810 IF colr%<=255 THEN 58255820 colr%=2555825 IF colr%>0 THEN 58305827 colr%=05830 POKE(padd%+col%*4+2),colr%5835 SPRITEAT 5,sx%*4+colr%+32,sy%*40+325840 GOTO 5005850 colg%=mx%-(4*sx%)+15860 IF colg%<=255 THEN 58755870 colg%=2555875 IF colg%>0 THEN 58805877 colg%=05880 POKE(padd%+col%*4+1),colg%5890 SPRITEAT 6,sx%*4+colg%+32,sy%*42+325895 GOTO 5005900 colb%=mx%-(4*sx%)5910 IF colb%<=255 THEN 59305920 colb%=2555930 IF colg%>0 THEN 59505940 colb%=05950 POKE(padd%+col%*4),colb%5960 SPRITEAT 7,sx%*4+colb%+32,sy%*44+325970 GOTO 5009999 END20000 DATA 0,0,0,0,0,0,34,35,35,67,69,73,98,104,113,130,139,15220010 DATA 166,174,186,200,200,200,98,93,84,133,117,10120020 DATA 158,140,121,174,161,137,187,175,164,204,195,177,234,219,20120030 DATA 255,243,214,088,49,38,115,61,59,136,80,65,154,98,7620040 DATA 173,110,81,213,141,107,251,170,132,255,206,127,00,39,5320050 DATA 0,56,80,0,77,94,11,102,127,0,111,137,50,140,16720060 DATA 36,174,214,136,214,255,102,43,41,148,54,58,182,77,7020070 DATA 205,94,70,227,120,64,249,155,78,255,188,78,255,233,7320080 DATA 40,43,74,58,69,104,97,95,132,122,119,153,134,144,17820090 DATA 150,178,217,199,214,255,198,236,255,000,34,25,0,50,3320100 DATA 23,74,27,34,89,24,47,105,12,81,136,34,125,164,4520110 DATA 166,204,52,024,31,47,35,50,77,37,70,107,54,107,13820120 DATA 049,142,184,65,178,227,82,210,255,116,245,253,26,51,4420130 DATA 47,63,56,56,81,64,50,92,64,65,116,85,73,137,9620140 DATA 85,182,125,145,218,161,94,7,17,130,33,29,182,60,5320150 DATA 228,92,95,255,118,118,255,155,168,255,187,199,255,219,25520160 DATA 45,49,54,72,71,77,91,92,105,115,115,127,132,135,14920170 DATA 171,174,190,186,199,219,235,240,246,59,48,60,90,60,6920180 DATA 138,82,88,174,107,96,199,130,108,216,159,117,236,197,12920190 DATA 255,250,171,49,34,42,74,53,60,94,70,70,114,90,8120200 DATA 126,108,84,158,138,110,192,165,136,221,191,154,46,16,3820210 DATA 73,40,61,102,54,89,151,84,117,185,109,145,193,120,17020220 DATA 219,153,191,248,198,218,0,46,73,0,64,81,0,81,9820230 DATA 0,107,109,0,130,121,0,160,135,0,191,163,0,222,21820240 DATA 69,49,37,97,74,60,126,97,68,153,121,81,178,144,9820250 DATA 204,169,110,232,203,130,251,234,163,95,9,38,110,36,5220260 DATA 144,70,71,167,96,87,189,125,100,206,151,112,237,182,12420270 DATA 237,212,147,50,53,88,74,82,128,100,101,157,120,119,19320280 DATA 142,140,226,156,155,239,184,174,255,220,212,255,67,23,4120290 DATA 113,43,59,159,59,82,217,74,105,248,93,128,255,125,17520300 DATA 255,166,197,255,205,255,73,37,28,99,52,50,124,75,7120310 DATA 152,89,90,172,111,110,193,126,122,210,141,122,229,154,12420320 DATA 032,41,0,047,79,8,73,93,0,97,115,8,124,131,3020330 DATA 150,154,38,180,170,51,208,204,50,98,42,0,117,59,920340 DATA 133,79,18,158,101,32,186,136,46,209,170,57,232,210,7520350 DATA 255,246,79,38,35,61,59,56,85,86,80,111,117,104,11020360 DATA 145,122,123,179,151,131,207,175,142,254,223,177,29,44,6720370 DATA 46,61,71,57,77,60,76,95,51,88,113,44,107,132,4520380 DATA 120,158,36,127,189,57,55,36,35,83,57,58,120,76,7320390 DATA 148,93,79,169,109,88,191,126,99,215,147,116,244,163,12820400 DATA 45,75,71,71,101,90,91,123,105,113,149,125,135,174,14220410 DATA 138,193,150,169,209,193,224,250,235,0,27,64,3,49,9520420 DATA 7,72,124,16,93,162,20,118,192,64,151,234,85,177,24120430 DATA 109,204,255,85,71,105,118,93,115,151,116,136,185,140,14720440 DATA 213,163,154,235,189,157,255,213,155,253,247,134,29,29,3320450 DATA 60,49,81,88,74,127,121,100,186,149,133,241,169,150,23620460 DATA 186,171,247,209,189,254,38,36,80,40,51,93,45,61,11420470 DATA 61,80,131,81,101,174,82,116,197,108,130,196,131,147,19520480 DATA 73,33,41,94,65,74,119,83,91,145,96,106,173,121,13220490 DATA 181,139,148,212,174,170,255,226,207,114,28,3,156,51,3920500 DATA 191,90,62,233,134,39,255,177,8,255,207,5,255,240,43,255,255,255 